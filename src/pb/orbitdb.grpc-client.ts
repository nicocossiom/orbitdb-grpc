// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies,server_grpc1,client_grpc1
// @generated from protobuf file "orbitdb.proto" (package "orbitdb", syntax proto3)
// tslint:disable
import { OrbitDB } from "./orbitdb";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { CloseDatabaseRequest } from "./orbitdb";
import type { OpenDatabaseResponse } from "./orbitdb";
import type { OpenDatabaseRequest } from "./orbitdb";
import type { AvailableDatabasesResponse } from "./orbitdb";
import type { Empty } from "./google/protobuf/empty";
import * as grpc from "@grpc/grpc-js";
/**
 * Define the OrbitDB service
 *
 * @generated from protobuf service orbitdb.OrbitDB
 */
export interface IOrbitDBClient {
    /**
     * Define the RPC methods for the OrbitDB service
     *
     * @generated from protobuf rpc: StopService(google.protobuf.Empty) returns (google.protobuf.Empty);
     */
    stopService(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    stopService(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    stopService(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    stopService(input: Empty, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: AvailableDatabases(google.protobuf.Empty) returns (orbitdb.AvailableDatabasesResponse);
     */
    availableDatabases(input: Empty, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AvailableDatabasesResponse) => void): grpc.ClientUnaryCall;
    availableDatabases(input: Empty, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: AvailableDatabasesResponse) => void): grpc.ClientUnaryCall;
    availableDatabases(input: Empty, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AvailableDatabasesResponse) => void): grpc.ClientUnaryCall;
    availableDatabases(input: Empty, callback: (err: grpc.ServiceError | null, value?: AvailableDatabasesResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: OpenDatabase(orbitdb.OpenDatabaseRequest) returns (orbitdb.OpenDatabaseResponse);
     */
    openDatabase(input: OpenDatabaseRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OpenDatabaseResponse) => void): grpc.ClientUnaryCall;
    openDatabase(input: OpenDatabaseRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: OpenDatabaseResponse) => void): grpc.ClientUnaryCall;
    openDatabase(input: OpenDatabaseRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: OpenDatabaseResponse) => void): grpc.ClientUnaryCall;
    openDatabase(input: OpenDatabaseRequest, callback: (err: grpc.ServiceError | null, value?: OpenDatabaseResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: CloseDatabase(orbitdb.CloseDatabaseRequest) returns (google.protobuf.Empty);
     */
    closeDatabase(input: CloseDatabaseRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    closeDatabase(input: CloseDatabaseRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    closeDatabase(input: CloseDatabaseRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
    closeDatabase(input: CloseDatabaseRequest, callback: (err: grpc.ServiceError | null, value?: Empty) => void): grpc.ClientUnaryCall;
}
/**
 * Define the OrbitDB service
 *
 * @generated from protobuf service orbitdb.OrbitDB
 */
export class OrbitDBClient extends grpc.Client implements IOrbitDBClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * Define the RPC methods for the OrbitDB service
     *
     * @generated from protobuf rpc: StopService(google.protobuf.Empty) returns (google.protobuf.Empty);
     */
    stopService(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), callback?: ((err: grpc.ServiceError | null, value?: Empty) => void)): grpc.ClientUnaryCall {
        const method = OrbitDB.methods[0];
        return this.makeUnaryRequest<Empty, Empty>(`/${OrbitDB.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Empty => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: AvailableDatabases(google.protobuf.Empty) returns (orbitdb.AvailableDatabasesResponse);
     */
    availableDatabases(input: Empty, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AvailableDatabasesResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AvailableDatabasesResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: AvailableDatabasesResponse) => void)): grpc.ClientUnaryCall {
        const method = OrbitDB.methods[1];
        return this.makeUnaryRequest<Empty, AvailableDatabasesResponse>(`/${OrbitDB.typeName}/${method.name}`, (value: Empty): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AvailableDatabasesResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: OpenDatabase(orbitdb.OpenDatabaseRequest) returns (orbitdb.OpenDatabaseResponse);
     */
    openDatabase(input: OpenDatabaseRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OpenDatabaseResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: OpenDatabaseResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: OpenDatabaseResponse) => void)): grpc.ClientUnaryCall {
        const method = OrbitDB.methods[2];
        return this.makeUnaryRequest<OpenDatabaseRequest, OpenDatabaseResponse>(`/${OrbitDB.typeName}/${method.name}`, (value: OpenDatabaseRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OpenDatabaseResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: CloseDatabase(orbitdb.CloseDatabaseRequest) returns (google.protobuf.Empty);
     */
    closeDatabase(input: CloseDatabaseRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: Empty) => void), callback?: ((err: grpc.ServiceError | null, value?: Empty) => void)): grpc.ClientUnaryCall {
        const method = OrbitDB.methods[3];
        return this.makeUnaryRequest<CloseDatabaseRequest, Empty>(`/${OrbitDB.typeName}/${method.name}`, (value: CloseDatabaseRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): Empty => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
