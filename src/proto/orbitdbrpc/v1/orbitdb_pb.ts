// @generated by protoc-gen-es v1.3.3 with parameter "target=ts"
// @generated from file orbitdbrpc/v1/orbitdb.proto (package orbitdbrpc.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Any, Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum orbitdbrpc.v1.DatabaseTypes
 */
export enum DatabaseTypes {
  /**
   * @generated from enum value: DATABASE_TYPES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATABASE_TYPES_DOCUMENT = 1;
   */
  DOCUMENT = 1,

  /**
   * @generated from enum value: DATABASE_TYPES_KEYVALUE = 2;
   */
  KEYVALUE = 2,

  /**
   * @generated from enum value: DATABASE_TYPES_EVENT = 3;
   */
  EVENT = 3,

  /**
   * @generated from enum value: DATABASE_TYPES_INDEXED_KEY_VALUE = 4;
   */
  INDEXED_KEY_VALUE = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DatabaseTypes)
proto3.util.setEnumType(DatabaseTypes, "orbitdbrpc.v1.DatabaseTypes", [
  { no: 0, name: "DATABASE_TYPES_UNSPECIFIED" },
  { no: 1, name: "DATABASE_TYPES_DOCUMENT" },
  { no: 2, name: "DATABASE_TYPES_KEYVALUE" },
  { no: 3, name: "DATABASE_TYPES_EVENT" },
  { no: 4, name: "DATABASE_TYPES_INDEXED_KEY_VALUE" },
]);

/**
 * ControllerTypes
 *
 * @generated from enum orbitdbrpc.v1.ControllerTypes
 */
export enum ControllerTypes {
  /**
   * @generated from enum value: CONTROLLER_TYPES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CONTROLLER_TYPES_IPFS = 1;
   */
  IPFS = 1,

  /**
   * @generated from enum value: CONTROLLER_TYPES_ORBITDB = 2;
   */
  ORBITDB = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ControllerTypes)
proto3.util.setEnumType(ControllerTypes, "orbitdbrpc.v1.ControllerTypes", [
  { no: 0, name: "CONTROLLER_TYPES_UNSPECIFIED" },
  { no: 1, name: "CONTROLLER_TYPES_IPFS" },
  { no: 2, name: "CONTROLLER_TYPES_ORBITDB" },
]);

/**
 * Database
 *
 * @generated from message orbitdbrpc.v1.Database
 */
export class Database extends Message<Database> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: string type = 3;
   */
  type = "";

  /**
   * @generated from field: orbitdbrpc.v1.ControllerTypes controller = 4;
   */
  controller = ControllerTypes.UNSPECIFIED;

  constructor(data?: PartialMessage<Database>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.Database";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "controller", kind: "enum", T: proto3.getEnumType(ControllerTypes) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Database {
    return new Database().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Database {
    return new Database().fromJsonString(jsonString, options);
  }

  static equals(a: Database | PlainMessage<Database> | undefined, b: Database | PlainMessage<Database> | undefined): boolean {
    return proto3.util.equals(Database, a, b);
  }
}

/**
 * OpenDatabase
 *
 * @generated from message orbitdbrpc.v1.OpenDatabaseRequest
 */
export class OpenDatabaseRequest extends Message<OpenDatabaseRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string db_address = 2;
   */
  dbAddress?: string;

  /**
   * @generated from field: orbitdbrpc.v1.DatabaseTypes type = 3;
   */
  type = DatabaseTypes.UNSPECIFIED;

  /**
   * @generated from field: optional orbitdbrpc.v1.OpenDatabaseRequest.Options options = 4;
   */
  options?: OpenDatabaseRequest_Options;

  constructor(data?: PartialMessage<OpenDatabaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.OpenDatabaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "db_address", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(DatabaseTypes) },
    { no: 4, name: "options", kind: "message", T: OpenDatabaseRequest_Options, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenDatabaseRequest {
    return new OpenDatabaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenDatabaseRequest {
    return new OpenDatabaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenDatabaseRequest {
    return new OpenDatabaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: OpenDatabaseRequest | PlainMessage<OpenDatabaseRequest> | undefined, b: OpenDatabaseRequest | PlainMessage<OpenDatabaseRequest> | undefined): boolean {
    return proto3.util.equals(OpenDatabaseRequest, a, b);
  }
}

/**
 * @generated from message orbitdbrpc.v1.OpenDatabaseRequest.Options
 */
export class OpenDatabaseRequest_Options extends Message<OpenDatabaseRequest_Options> {
  /**
   * @generated from field: optional string ipfs_api_address = 1;
   */
  ipfsApiAddress?: string;

  /**
   * @generated from field: optional string meta = 2;
   */
  meta?: string;

  /**
   * @generated from field: optional bool sync = 3;
   */
  sync?: boolean;

  /**
   * @generated from field: optional orbitdbrpc.v1.ControllerTypes controller = 4;
   */
  controller?: ControllerTypes;

  /**
   * TODO see if more options can be somehow added here see
   * https://api.orbitdb.org/module-OrbitDB-OrbitDB.html
   *
   * @generated from field: optional google.protobuf.Any database_structure = 5;
   */
  databaseStructure?: Any;

  constructor(data?: PartialMessage<OpenDatabaseRequest_Options>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.OpenDatabaseRequest.Options";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ipfs_api_address", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 2, name: "meta", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "sync", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "controller", kind: "enum", T: proto3.getEnumType(ControllerTypes), opt: true },
    { no: 5, name: "database_structure", kind: "message", T: Any, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenDatabaseRequest_Options {
    return new OpenDatabaseRequest_Options().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenDatabaseRequest_Options {
    return new OpenDatabaseRequest_Options().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenDatabaseRequest_Options {
    return new OpenDatabaseRequest_Options().fromJsonString(jsonString, options);
  }

  static equals(a: OpenDatabaseRequest_Options | PlainMessage<OpenDatabaseRequest_Options> | undefined, b: OpenDatabaseRequest_Options | PlainMessage<OpenDatabaseRequest_Options> | undefined): boolean {
    return proto3.util.equals(OpenDatabaseRequest_Options, a, b);
  }
}

/**
 * @generated from message orbitdbrpc.v1.OpenDatabaseResponse
 */
export class OpenDatabaseResponse extends Message<OpenDatabaseResponse> {
  /**
   * @generated from field: string db_address = 1;
   */
  dbAddress = "";

  /**
   * @generated from field: bool is_new = 2;
   */
  isNew = false;

  constructor(data?: PartialMessage<OpenDatabaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.OpenDatabaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "db_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_new", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OpenDatabaseResponse {
    return new OpenDatabaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OpenDatabaseResponse {
    return new OpenDatabaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OpenDatabaseResponse {
    return new OpenDatabaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: OpenDatabaseResponse | PlainMessage<OpenDatabaseResponse> | undefined, b: OpenDatabaseResponse | PlainMessage<OpenDatabaseResponse> | undefined): boolean {
    return proto3.util.equals(OpenDatabaseResponse, a, b);
  }
}

/**
 * CloseDatabase
 *
 * @generated from message orbitdbrpc.v1.CloseDatabaseRequest
 */
export class CloseDatabaseRequest extends Message<CloseDatabaseRequest> {
  /**
   * @generated from field: string db_address = 1;
   */
  dbAddress = "";

  constructor(data?: PartialMessage<CloseDatabaseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.CloseDatabaseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "db_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseDatabaseRequest {
    return new CloseDatabaseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseDatabaseRequest {
    return new CloseDatabaseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseDatabaseRequest {
    return new CloseDatabaseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CloseDatabaseRequest | PlainMessage<CloseDatabaseRequest> | undefined, b: CloseDatabaseRequest | PlainMessage<CloseDatabaseRequest> | undefined): boolean {
    return proto3.util.equals(CloseDatabaseRequest, a, b);
  }
}

/**
 * @generated from message orbitdbrpc.v1.CloseDatabaseResponse
 */
export class CloseDatabaseResponse extends Message<CloseDatabaseResponse> {
  constructor(data?: PartialMessage<CloseDatabaseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.CloseDatabaseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CloseDatabaseResponse {
    return new CloseDatabaseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CloseDatabaseResponse {
    return new CloseDatabaseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CloseDatabaseResponse {
    return new CloseDatabaseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CloseDatabaseResponse | PlainMessage<CloseDatabaseResponse> | undefined, b: CloseDatabaseResponse | PlainMessage<CloseDatabaseResponse> | undefined): boolean {
    return proto3.util.equals(CloseDatabaseResponse, a, b);
  }
}

/**
 * AvailableDatabases
 *
 * @generated from message orbitdbrpc.v1.AvailableDatabasesResponse
 */
export class AvailableDatabasesResponse extends Message<AvailableDatabasesResponse> {
  /**
   * @generated from field: repeated orbitdbrpc.v1.Database databases = 1;
   */
  databases: Database[] = [];

  constructor(data?: PartialMessage<AvailableDatabasesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.AvailableDatabasesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "databases", kind: "message", T: Database, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableDatabasesResponse {
    return new AvailableDatabasesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableDatabasesResponse {
    return new AvailableDatabasesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableDatabasesResponse {
    return new AvailableDatabasesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableDatabasesResponse | PlainMessage<AvailableDatabasesResponse> | undefined, b: AvailableDatabasesResponse | PlainMessage<AvailableDatabasesResponse> | undefined): boolean {
    return proto3.util.equals(AvailableDatabasesResponse, a, b);
  }
}

/**
 * @generated from message orbitdbrpc.v1.AvailableDatabasesRequest
 */
export class AvailableDatabasesRequest extends Message<AvailableDatabasesRequest> {
  constructor(data?: PartialMessage<AvailableDatabasesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.AvailableDatabasesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableDatabasesRequest {
    return new AvailableDatabasesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableDatabasesRequest {
    return new AvailableDatabasesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableDatabasesRequest {
    return new AvailableDatabasesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableDatabasesRequest | PlainMessage<AvailableDatabasesRequest> | undefined, b: AvailableDatabasesRequest | PlainMessage<AvailableDatabasesRequest> | undefined): boolean {
    return proto3.util.equals(AvailableDatabasesRequest, a, b);
  }
}

/**
 * StopService
 *
 * @generated from message orbitdbrpc.v1.StopServiceRequest
 */
export class StopServiceRequest extends Message<StopServiceRequest> {
  constructor(data?: PartialMessage<StopServiceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.StopServiceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopServiceRequest {
    return new StopServiceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopServiceRequest {
    return new StopServiceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopServiceRequest {
    return new StopServiceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StopServiceRequest | PlainMessage<StopServiceRequest> | undefined, b: StopServiceRequest | PlainMessage<StopServiceRequest> | undefined): boolean {
    return proto3.util.equals(StopServiceRequest, a, b);
  }
}

/**
 * @generated from message orbitdbrpc.v1.StopServiceResponse
 */
export class StopServiceResponse extends Message<StopServiceResponse> {
  constructor(data?: PartialMessage<StopServiceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "orbitdbrpc.v1.StopServiceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StopServiceResponse {
    return new StopServiceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StopServiceResponse {
    return new StopServiceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StopServiceResponse {
    return new StopServiceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StopServiceResponse | PlainMessage<StopServiceResponse> | undefined, b: StopServiceResponse | PlainMessage<StopServiceResponse> | undefined): boolean {
    return proto3.util.equals(StopServiceResponse, a, b);
  }
}

