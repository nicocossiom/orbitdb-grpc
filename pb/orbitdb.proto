syntax = "proto3";

package orbitdb;
import "google/protobuf/any.proto";
import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

extend google.protobuf.EnumValueOptions {
  optional string string_name = 123456789;
}

// Define the messages for the OrbitDB service

enum DatabaseTypes {
  DATABASE_TYPES_UNSPECIFIED = 0;
  DATABASE_TYPES_DOCUMENT = 1 [ (string_name) = "documents" ];
  DATABASE_TYPES_KEYVALUE = 2 [ (string_name) = "keyvalue" ];
  DATABASE_TYPES_EVENT = 3 [ (string_name) = "display_value" ];
  DATABASE_TYPES_INDEXED_KEY_VALUE = 4 [ (string_name) = "display_value" ];
}

enum ControllerTypes {
  CONTROLLER_TYPES_UNSPECIFIED = 0;
  CONTROLLER_TYPES_IPFS = 1;
  CONTROLLER_TYPES_ORBITDB = 2;
}

message Database {
  string name = 1;
  string address = 2;
  DatabaseTypes type = 3;
  ControllerTypes controller = 4;
}

message OpenDatabaseRequest {
  message Options {
    optional string ipfs_api_address = 1; 
    optional string meta = 2; 
    optional bool sync = 3; 
    optional ControllerTypes controller = 4;
    optional google.protobuf.Any database_structure = 5;
    // TODO see if more options can be somehow added here see
    // https://api.orbitdb.org/module-OrbitDB-OrbitDB.html
  }
  
  string name = 1;
  optional string db_address = 2; 
  DatabaseTypes type = 3;
  optional Options options = 4; 
}

message OpenDatabaseResponse {
  string db_address = 1;
  bool is_new = 2;
}

message CloseDatabaseRequest {
  string db_address = 1;
}

message AvailableDatabasesResponse{
  repeated Database databases = 1;
}

// Define the OrbitDB service
service OrbitDB {
  // Define the RPC methods for the OrbitDB service
  rpc StopService(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc AvailableDatabases(google.protobuf.Empty) 
    returns (AvailableDatabasesResponse) {}
  rpc OpenDatabase(OpenDatabaseRequest) returns (OpenDatabaseResponse) {}
  rpc CloseDatabase(CloseDatabaseRequest) returns (google.protobuf.Empty) {}
}